// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package manager

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkUserQuotaStmt, err = db.PrepareContext(ctx, checkUserQuota); err != nil {
		return nil, fmt.Errorf("error preparing query CheckUserQuota: %w", err)
	}
	if q.countActiveAPIKeysStmt, err = db.PrepareContext(ctx, countActiveAPIKeys); err != nil {
		return nil, fmt.Errorf("error preparing query CountActiveAPIKeys: %w", err)
	}
	if q.countCollaboratorProjectsStmt, err = db.PrepareContext(ctx, countCollaboratorProjects); err != nil {
		return nil, fmt.Errorf("error preparing query CountCollaboratorProjects: %w", err)
	}
	if q.countIconsByStatusStmt, err = db.PrepareContext(ctx, countIconsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query CountIconsByStatus: %w", err)
	}
	if q.countItemsByResolutionStmt, err = db.PrepareContext(ctx, countItemsByResolution); err != nil {
		return nil, fmt.Errorf("error preparing query CountItemsByResolution: %w", err)
	}
	if q.countProjectCollaboratorsStmt, err = db.PrepareContext(ctx, countProjectCollaborators); err != nil {
		return nil, fmt.Errorf("error preparing query CountProjectCollaborators: %w", err)
	}
	if q.countProjectIconsStmt, err = db.PrepareContext(ctx, countProjectIcons); err != nil {
		return nil, fmt.Errorf("error preparing query CountProjectIcons: %w", err)
	}
	if q.countProjectRequestsStmt, err = db.PrepareContext(ctx, countProjectRequests); err != nil {
		return nil, fmt.Errorf("error preparing query CountProjectRequests: %w", err)
	}
	if q.countProjectsByOwnerStmt, err = db.PrepareContext(ctx, countProjectsByOwner); err != nil {
		return nil, fmt.Errorf("error preparing query CountProjectsByOwner: %w", err)
	}
	if q.countProjectsByVisibilityStmt, err = db.PrepareContext(ctx, countProjectsByVisibility); err != nil {
		return nil, fmt.Errorf("error preparing query CountProjectsByVisibility: %w", err)
	}
	if q.countRequestItemsStmt, err = db.PrepareContext(ctx, countRequestItems); err != nil {
		return nil, fmt.Errorf("error preparing query CountRequestItems: %w", err)
	}
	if q.countRequestsByStatusStmt, err = db.PrepareContext(ctx, countRequestsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query CountRequestsByStatus: %w", err)
	}
	if q.createIconStmt, err = db.PrepareContext(ctx, createIcon); err != nil {
		return nil, fmt.Errorf("error preparing query CreateIcon: %w", err)
	}
	if q.createIconRequestStmt, err = db.PrepareContext(ctx, createIconRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreateIconRequest: %w", err)
	}
	if q.createProjectStmt, err = db.PrepareContext(ctx, createProject); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProject: %w", err)
	}
	if q.createProjectAPIKeyStmt, err = db.PrepareContext(ctx, createProjectAPIKey); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProjectAPIKey: %w", err)
	}
	if q.createRequestItemStmt, err = db.PrepareContext(ctx, createRequestItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRequestItem: %w", err)
	}
	if q.createUserProjectRoleStmt, err = db.PrepareContext(ctx, createUserProjectRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserProjectRole: %w", err)
	}
	if q.createUserQuotaStmt, err = db.PrepareContext(ctx, createUserQuota); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserQuota: %w", err)
	}
	if q.deactivateAPIKeyStmt, err = db.PrepareContext(ctx, deactivateAPIKey); err != nil {
		return nil, fmt.Errorf("error preparing query DeactivateAPIKey: %w", err)
	}
	if q.deleteAPIKeyStmt, err = db.PrepareContext(ctx, deleteAPIKey); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAPIKey: %w", err)
	}
	if q.deleteIconStmt, err = db.PrepareContext(ctx, deleteIcon); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteIcon: %w", err)
	}
	if q.deleteIconRequestStmt, err = db.PrepareContext(ctx, deleteIconRequest); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteIconRequest: %w", err)
	}
	if q.deleteProjectStmt, err = db.PrepareContext(ctx, deleteProject); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProject: %w", err)
	}
	if q.deleteProjectAPIKeysStmt, err = db.PrepareContext(ctx, deleteProjectAPIKeys); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProjectAPIKeys: %w", err)
	}
	if q.deleteProjectCollaboratorsStmt, err = db.PrepareContext(ctx, deleteProjectCollaborators); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProjectCollaborators: %w", err)
	}
	if q.deleteProjectIconsStmt, err = db.PrepareContext(ctx, deleteProjectIcons); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProjectIcons: %w", err)
	}
	if q.deleteProjectRequestItemsStmt, err = db.PrepareContext(ctx, deleteProjectRequestItems); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProjectRequestItems: %w", err)
	}
	if q.deleteProjectRequestsStmt, err = db.PrepareContext(ctx, deleteProjectRequests); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProjectRequests: %w", err)
	}
	if q.deleteRequestItemStmt, err = db.PrepareContext(ctx, deleteRequestItem); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRequestItem: %w", err)
	}
	if q.deleteRequestItemsStmt, err = db.PrepareContext(ctx, deleteRequestItems); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRequestItems: %w", err)
	}
	if q.deleteUserProjectRoleStmt, err = db.PrepareContext(ctx, deleteUserProjectRole); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserProjectRole: %w", err)
	}
	if q.deleteUserQuotaStmt, err = db.PrepareContext(ctx, deleteUserQuota); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserQuota: %w", err)
	}
	if q.getDuplicateIconsStmt, err = db.PrepareContext(ctx, getDuplicateIcons); err != nil {
		return nil, fmt.Errorf("error preparing query GetDuplicateIcons: %w", err)
	}
	if q.getIconByComponentStmt, err = db.PrepareContext(ctx, getIconByComponent); err != nil {
		return nil, fmt.Errorf("error preparing query GetIconByComponent: %w", err)
	}
	if q.getIconByIDStmt, err = db.PrepareContext(ctx, getIconByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetIconByID: %w", err)
	}
	if q.getIconRequestByIDStmt, err = db.PrepareContext(ctx, getIconRequestByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetIconRequestByID: %w", err)
	}
	if q.getIconRequestByIDAndProjectStmt, err = db.PrepareContext(ctx, getIconRequestByIDAndProject); err != nil {
		return nil, fmt.Errorf("error preparing query GetIconRequestByIDAndProject: %w", err)
	}
	if q.getIconStatsStmt, err = db.PrepareContext(ctx, getIconStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetIconStats: %w", err)
	}
	if q.getIconWithRequestInfoStmt, err = db.PrepareContext(ctx, getIconWithRequestInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetIconWithRequestInfo: %w", err)
	}
	if q.getItemStatsStmt, err = db.PrepareContext(ctx, getItemStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemStats: %w", err)
	}
	if q.getProjectAPIKeyByHashStmt, err = db.PrepareContext(ctx, getProjectAPIKeyByHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectAPIKeyByHash: %w", err)
	}
	if q.getProjectAPIKeyByIDStmt, err = db.PrepareContext(ctx, getProjectAPIKeyByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectAPIKeyByID: %w", err)
	}
	if q.getProjectByIDStmt, err = db.PrepareContext(ctx, getProjectByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectByID: %w", err)
	}
	if q.getProjectByIDAndOwnerStmt, err = db.PrepareContext(ctx, getProjectByIDAndOwner); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectByIDAndOwner: %w", err)
	}
	if q.getProjectBySlugStmt, err = db.PrepareContext(ctx, getProjectBySlug); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectBySlug: %w", err)
	}
	if q.getProjectStatsStmt, err = db.PrepareContext(ctx, getProjectStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectStats: %w", err)
	}
	if q.getProjectWithStatsStmt, err = db.PrepareContext(ctx, getProjectWithStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetProjectWithStats: %w", err)
	}
	if q.getRequestItemByComponentStmt, err = db.PrepareContext(ctx, getRequestItemByComponent); err != nil {
		return nil, fmt.Errorf("error preparing query GetRequestItemByComponent: %w", err)
	}
	if q.getRequestItemByIDStmt, err = db.PrepareContext(ctx, getRequestItemByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRequestItemByID: %w", err)
	}
	if q.getRequestStatsStmt, err = db.PrepareContext(ctx, getRequestStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetRequestStats: %w", err)
	}
	if q.getUserProjectRoleStmt, err = db.PrepareContext(ctx, getUserProjectRole); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserProjectRole: %w", err)
	}
	if q.getUserQuotaStmt, err = db.PrepareContext(ctx, getUserQuota); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserQuota: %w", err)
	}
	if q.listCollaboratorProjectIDsStmt, err = db.PrepareContext(ctx, listCollaboratorProjectIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListCollaboratorProjectIDs: %w", err)
	}
	if q.listIconsByPackageStmt, err = db.PrepareContext(ctx, listIconsByPackage); err != nil {
		return nil, fmt.Errorf("error preparing query ListIconsByPackage: %w", err)
	}
	if q.listIconsByStatusStmt, err = db.PrepareContext(ctx, listIconsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query ListIconsByStatus: %w", err)
	}
	if q.listItemsByResolutionStmt, err = db.PrepareContext(ctx, listItemsByResolution); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsByResolution: %w", err)
	}
	if q.listOwnedProjectIDsStmt, err = db.PrepareContext(ctx, listOwnedProjectIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListOwnedProjectIDs: %w", err)
	}
	if q.listProjectAPIKeysStmt, err = db.PrepareContext(ctx, listProjectAPIKeys); err != nil {
		return nil, fmt.Errorf("error preparing query ListProjectAPIKeys: %w", err)
	}
	if q.listProjectCollaboratorsStmt, err = db.PrepareContext(ctx, listProjectCollaborators); err != nil {
		return nil, fmt.Errorf("error preparing query ListProjectCollaborators: %w", err)
	}
	if q.listProjectIconsStmt, err = db.PrepareContext(ctx, listProjectIcons); err != nil {
		return nil, fmt.Errorf("error preparing query ListProjectIcons: %w", err)
	}
	if q.listProjectRequestItemsStmt, err = db.PrepareContext(ctx, listProjectRequestItems); err != nil {
		return nil, fmt.Errorf("error preparing query ListProjectRequestItems: %w", err)
	}
	if q.listProjectRequestsStmt, err = db.PrepareContext(ctx, listProjectRequests); err != nil {
		return nil, fmt.Errorf("error preparing query ListProjectRequests: %w", err)
	}
	if q.listProjectsByOwnerStmt, err = db.PrepareContext(ctx, listProjectsByOwner); err != nil {
		return nil, fmt.Errorf("error preparing query ListProjectsByOwner: %w", err)
	}
	if q.listProjectsByVisibilityStmt, err = db.PrepareContext(ctx, listProjectsByVisibility); err != nil {
		return nil, fmt.Errorf("error preparing query ListProjectsByVisibility: %w", err)
	}
	if q.listPublicProjectsStmt, err = db.PrepareContext(ctx, listPublicProjects); err != nil {
		return nil, fmt.Errorf("error preparing query ListPublicProjects: %w", err)
	}
	if q.listRecentActivityStmt, err = db.PrepareContext(ctx, listRecentActivity); err != nil {
		return nil, fmt.Errorf("error preparing query ListRecentActivity: %w", err)
	}
	if q.listRequestItemsStmt, err = db.PrepareContext(ctx, listRequestItems); err != nil {
		return nil, fmt.Errorf("error preparing query ListRequestItems: %w", err)
	}
	if q.listRequestsByStatusStmt, err = db.PrepareContext(ctx, listRequestsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query ListRequestsByStatus: %w", err)
	}
	if q.listUserProjectsStmt, err = db.PrepareContext(ctx, listUserProjects); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserProjects: %w", err)
	}
	if q.searchIconsStmt, err = db.PrepareContext(ctx, searchIcons); err != nil {
		return nil, fmt.Errorf("error preparing query SearchIcons: %w", err)
	}
	if q.updateAPIKeyLastUsedStmt, err = db.PrepareContext(ctx, updateAPIKeyLastUsed); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAPIKeyLastUsed: %w", err)
	}
	if q.updateIconStmt, err = db.PrepareContext(ctx, updateIcon); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateIcon: %w", err)
	}
	if q.updateIconStatusStmt, err = db.PrepareContext(ctx, updateIconStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateIconStatus: %w", err)
	}
	if q.updateItemResolutionStmt, err = db.PrepareContext(ctx, updateItemResolution); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemResolution: %w", err)
	}
	if q.updateProjectStmt, err = db.PrepareContext(ctx, updateProject); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProject: %w", err)
	}
	if q.updateProjectIconCountStmt, err = db.PrepareContext(ctx, updateProjectIconCount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProjectIconCount: %w", err)
	}
	if q.updateRequestArchivePathStmt, err = db.PrepareContext(ctx, updateRequestArchivePath); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRequestArchivePath: %w", err)
	}
	if q.updateRequestItemStmt, err = db.PrepareContext(ctx, updateRequestItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRequestItem: %w", err)
	}
	if q.updateRequestStatusStmt, err = db.PrepareContext(ctx, updateRequestStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRequestStatus: %w", err)
	}
	if q.updateUserProjectRoleStmt, err = db.PrepareContext(ctx, updateUserProjectRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserProjectRole: %w", err)
	}
	if q.updateUserQuotaStmt, err = db.PrepareContext(ctx, updateUserQuota); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserQuota: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkUserQuotaStmt != nil {
		if cerr := q.checkUserQuotaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkUserQuotaStmt: %w", cerr)
		}
	}
	if q.countActiveAPIKeysStmt != nil {
		if cerr := q.countActiveAPIKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countActiveAPIKeysStmt: %w", cerr)
		}
	}
	if q.countCollaboratorProjectsStmt != nil {
		if cerr := q.countCollaboratorProjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countCollaboratorProjectsStmt: %w", cerr)
		}
	}
	if q.countIconsByStatusStmt != nil {
		if cerr := q.countIconsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countIconsByStatusStmt: %w", cerr)
		}
	}
	if q.countItemsByResolutionStmt != nil {
		if cerr := q.countItemsByResolutionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countItemsByResolutionStmt: %w", cerr)
		}
	}
	if q.countProjectCollaboratorsStmt != nil {
		if cerr := q.countProjectCollaboratorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countProjectCollaboratorsStmt: %w", cerr)
		}
	}
	if q.countProjectIconsStmt != nil {
		if cerr := q.countProjectIconsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countProjectIconsStmt: %w", cerr)
		}
	}
	if q.countProjectRequestsStmt != nil {
		if cerr := q.countProjectRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countProjectRequestsStmt: %w", cerr)
		}
	}
	if q.countProjectsByOwnerStmt != nil {
		if cerr := q.countProjectsByOwnerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countProjectsByOwnerStmt: %w", cerr)
		}
	}
	if q.countProjectsByVisibilityStmt != nil {
		if cerr := q.countProjectsByVisibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countProjectsByVisibilityStmt: %w", cerr)
		}
	}
	if q.countRequestItemsStmt != nil {
		if cerr := q.countRequestItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countRequestItemsStmt: %w", cerr)
		}
	}
	if q.countRequestsByStatusStmt != nil {
		if cerr := q.countRequestsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countRequestsByStatusStmt: %w", cerr)
		}
	}
	if q.createIconStmt != nil {
		if cerr := q.createIconStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createIconStmt: %w", cerr)
		}
	}
	if q.createIconRequestStmt != nil {
		if cerr := q.createIconRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createIconRequestStmt: %w", cerr)
		}
	}
	if q.createProjectStmt != nil {
		if cerr := q.createProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProjectStmt: %w", cerr)
		}
	}
	if q.createProjectAPIKeyStmt != nil {
		if cerr := q.createProjectAPIKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProjectAPIKeyStmt: %w", cerr)
		}
	}
	if q.createRequestItemStmt != nil {
		if cerr := q.createRequestItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRequestItemStmt: %w", cerr)
		}
	}
	if q.createUserProjectRoleStmt != nil {
		if cerr := q.createUserProjectRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserProjectRoleStmt: %w", cerr)
		}
	}
	if q.createUserQuotaStmt != nil {
		if cerr := q.createUserQuotaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserQuotaStmt: %w", cerr)
		}
	}
	if q.deactivateAPIKeyStmt != nil {
		if cerr := q.deactivateAPIKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deactivateAPIKeyStmt: %w", cerr)
		}
	}
	if q.deleteAPIKeyStmt != nil {
		if cerr := q.deleteAPIKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAPIKeyStmt: %w", cerr)
		}
	}
	if q.deleteIconStmt != nil {
		if cerr := q.deleteIconStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteIconStmt: %w", cerr)
		}
	}
	if q.deleteIconRequestStmt != nil {
		if cerr := q.deleteIconRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteIconRequestStmt: %w", cerr)
		}
	}
	if q.deleteProjectStmt != nil {
		if cerr := q.deleteProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProjectStmt: %w", cerr)
		}
	}
	if q.deleteProjectAPIKeysStmt != nil {
		if cerr := q.deleteProjectAPIKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProjectAPIKeysStmt: %w", cerr)
		}
	}
	if q.deleteProjectCollaboratorsStmt != nil {
		if cerr := q.deleteProjectCollaboratorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProjectCollaboratorsStmt: %w", cerr)
		}
	}
	if q.deleteProjectIconsStmt != nil {
		if cerr := q.deleteProjectIconsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProjectIconsStmt: %w", cerr)
		}
	}
	if q.deleteProjectRequestItemsStmt != nil {
		if cerr := q.deleteProjectRequestItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProjectRequestItemsStmt: %w", cerr)
		}
	}
	if q.deleteProjectRequestsStmt != nil {
		if cerr := q.deleteProjectRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProjectRequestsStmt: %w", cerr)
		}
	}
	if q.deleteRequestItemStmt != nil {
		if cerr := q.deleteRequestItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRequestItemStmt: %w", cerr)
		}
	}
	if q.deleteRequestItemsStmt != nil {
		if cerr := q.deleteRequestItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRequestItemsStmt: %w", cerr)
		}
	}
	if q.deleteUserProjectRoleStmt != nil {
		if cerr := q.deleteUserProjectRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserProjectRoleStmt: %w", cerr)
		}
	}
	if q.deleteUserQuotaStmt != nil {
		if cerr := q.deleteUserQuotaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserQuotaStmt: %w", cerr)
		}
	}
	if q.getDuplicateIconsStmt != nil {
		if cerr := q.getDuplicateIconsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDuplicateIconsStmt: %w", cerr)
		}
	}
	if q.getIconByComponentStmt != nil {
		if cerr := q.getIconByComponentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIconByComponentStmt: %w", cerr)
		}
	}
	if q.getIconByIDStmt != nil {
		if cerr := q.getIconByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIconByIDStmt: %w", cerr)
		}
	}
	if q.getIconRequestByIDStmt != nil {
		if cerr := q.getIconRequestByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIconRequestByIDStmt: %w", cerr)
		}
	}
	if q.getIconRequestByIDAndProjectStmt != nil {
		if cerr := q.getIconRequestByIDAndProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIconRequestByIDAndProjectStmt: %w", cerr)
		}
	}
	if q.getIconStatsStmt != nil {
		if cerr := q.getIconStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIconStatsStmt: %w", cerr)
		}
	}
	if q.getIconWithRequestInfoStmt != nil {
		if cerr := q.getIconWithRequestInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIconWithRequestInfoStmt: %w", cerr)
		}
	}
	if q.getItemStatsStmt != nil {
		if cerr := q.getItemStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemStatsStmt: %w", cerr)
		}
	}
	if q.getProjectAPIKeyByHashStmt != nil {
		if cerr := q.getProjectAPIKeyByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectAPIKeyByHashStmt: %w", cerr)
		}
	}
	if q.getProjectAPIKeyByIDStmt != nil {
		if cerr := q.getProjectAPIKeyByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectAPIKeyByIDStmt: %w", cerr)
		}
	}
	if q.getProjectByIDStmt != nil {
		if cerr := q.getProjectByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectByIDStmt: %w", cerr)
		}
	}
	if q.getProjectByIDAndOwnerStmt != nil {
		if cerr := q.getProjectByIDAndOwnerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectByIDAndOwnerStmt: %w", cerr)
		}
	}
	if q.getProjectBySlugStmt != nil {
		if cerr := q.getProjectBySlugStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectBySlugStmt: %w", cerr)
		}
	}
	if q.getProjectStatsStmt != nil {
		if cerr := q.getProjectStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectStatsStmt: %w", cerr)
		}
	}
	if q.getProjectWithStatsStmt != nil {
		if cerr := q.getProjectWithStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProjectWithStatsStmt: %w", cerr)
		}
	}
	if q.getRequestItemByComponentStmt != nil {
		if cerr := q.getRequestItemByComponentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRequestItemByComponentStmt: %w", cerr)
		}
	}
	if q.getRequestItemByIDStmt != nil {
		if cerr := q.getRequestItemByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRequestItemByIDStmt: %w", cerr)
		}
	}
	if q.getRequestStatsStmt != nil {
		if cerr := q.getRequestStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRequestStatsStmt: %w", cerr)
		}
	}
	if q.getUserProjectRoleStmt != nil {
		if cerr := q.getUserProjectRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserProjectRoleStmt: %w", cerr)
		}
	}
	if q.getUserQuotaStmt != nil {
		if cerr := q.getUserQuotaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserQuotaStmt: %w", cerr)
		}
	}
	if q.listCollaboratorProjectIDsStmt != nil {
		if cerr := q.listCollaboratorProjectIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCollaboratorProjectIDsStmt: %w", cerr)
		}
	}
	if q.listIconsByPackageStmt != nil {
		if cerr := q.listIconsByPackageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listIconsByPackageStmt: %w", cerr)
		}
	}
	if q.listIconsByStatusStmt != nil {
		if cerr := q.listIconsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listIconsByStatusStmt: %w", cerr)
		}
	}
	if q.listItemsByResolutionStmt != nil {
		if cerr := q.listItemsByResolutionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsByResolutionStmt: %w", cerr)
		}
	}
	if q.listOwnedProjectIDsStmt != nil {
		if cerr := q.listOwnedProjectIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOwnedProjectIDsStmt: %w", cerr)
		}
	}
	if q.listProjectAPIKeysStmt != nil {
		if cerr := q.listProjectAPIKeysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProjectAPIKeysStmt: %w", cerr)
		}
	}
	if q.listProjectCollaboratorsStmt != nil {
		if cerr := q.listProjectCollaboratorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProjectCollaboratorsStmt: %w", cerr)
		}
	}
	if q.listProjectIconsStmt != nil {
		if cerr := q.listProjectIconsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProjectIconsStmt: %w", cerr)
		}
	}
	if q.listProjectRequestItemsStmt != nil {
		if cerr := q.listProjectRequestItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProjectRequestItemsStmt: %w", cerr)
		}
	}
	if q.listProjectRequestsStmt != nil {
		if cerr := q.listProjectRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProjectRequestsStmt: %w", cerr)
		}
	}
	if q.listProjectsByOwnerStmt != nil {
		if cerr := q.listProjectsByOwnerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProjectsByOwnerStmt: %w", cerr)
		}
	}
	if q.listProjectsByVisibilityStmt != nil {
		if cerr := q.listProjectsByVisibilityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProjectsByVisibilityStmt: %w", cerr)
		}
	}
	if q.listPublicProjectsStmt != nil {
		if cerr := q.listPublicProjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPublicProjectsStmt: %w", cerr)
		}
	}
	if q.listRecentActivityStmt != nil {
		if cerr := q.listRecentActivityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRecentActivityStmt: %w", cerr)
		}
	}
	if q.listRequestItemsStmt != nil {
		if cerr := q.listRequestItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRequestItemsStmt: %w", cerr)
		}
	}
	if q.listRequestsByStatusStmt != nil {
		if cerr := q.listRequestsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRequestsByStatusStmt: %w", cerr)
		}
	}
	if q.listUserProjectsStmt != nil {
		if cerr := q.listUserProjectsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserProjectsStmt: %w", cerr)
		}
	}
	if q.searchIconsStmt != nil {
		if cerr := q.searchIconsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchIconsStmt: %w", cerr)
		}
	}
	if q.updateAPIKeyLastUsedStmt != nil {
		if cerr := q.updateAPIKeyLastUsedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAPIKeyLastUsedStmt: %w", cerr)
		}
	}
	if q.updateIconStmt != nil {
		if cerr := q.updateIconStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateIconStmt: %w", cerr)
		}
	}
	if q.updateIconStatusStmt != nil {
		if cerr := q.updateIconStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateIconStatusStmt: %w", cerr)
		}
	}
	if q.updateItemResolutionStmt != nil {
		if cerr := q.updateItemResolutionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemResolutionStmt: %w", cerr)
		}
	}
	if q.updateProjectStmt != nil {
		if cerr := q.updateProjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProjectStmt: %w", cerr)
		}
	}
	if q.updateProjectIconCountStmt != nil {
		if cerr := q.updateProjectIconCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProjectIconCountStmt: %w", cerr)
		}
	}
	if q.updateRequestArchivePathStmt != nil {
		if cerr := q.updateRequestArchivePathStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestArchivePathStmt: %w", cerr)
		}
	}
	if q.updateRequestItemStmt != nil {
		if cerr := q.updateRequestItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestItemStmt: %w", cerr)
		}
	}
	if q.updateRequestStatusStmt != nil {
		if cerr := q.updateRequestStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRequestStatusStmt: %w", cerr)
		}
	}
	if q.updateUserProjectRoleStmt != nil {
		if cerr := q.updateUserProjectRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserProjectRoleStmt: %w", cerr)
		}
	}
	if q.updateUserQuotaStmt != nil {
		if cerr := q.updateUserQuotaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserQuotaStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	checkUserQuotaStmt               *sql.Stmt
	countActiveAPIKeysStmt           *sql.Stmt
	countCollaboratorProjectsStmt    *sql.Stmt
	countIconsByStatusStmt           *sql.Stmt
	countItemsByResolutionStmt       *sql.Stmt
	countProjectCollaboratorsStmt    *sql.Stmt
	countProjectIconsStmt            *sql.Stmt
	countProjectRequestsStmt         *sql.Stmt
	countProjectsByOwnerStmt         *sql.Stmt
	countProjectsByVisibilityStmt    *sql.Stmt
	countRequestItemsStmt            *sql.Stmt
	countRequestsByStatusStmt        *sql.Stmt
	createIconStmt                   *sql.Stmt
	createIconRequestStmt            *sql.Stmt
	createProjectStmt                *sql.Stmt
	createProjectAPIKeyStmt          *sql.Stmt
	createRequestItemStmt            *sql.Stmt
	createUserProjectRoleStmt        *sql.Stmt
	createUserQuotaStmt              *sql.Stmt
	deactivateAPIKeyStmt             *sql.Stmt
	deleteAPIKeyStmt                 *sql.Stmt
	deleteIconStmt                   *sql.Stmt
	deleteIconRequestStmt            *sql.Stmt
	deleteProjectStmt                *sql.Stmt
	deleteProjectAPIKeysStmt         *sql.Stmt
	deleteProjectCollaboratorsStmt   *sql.Stmt
	deleteProjectIconsStmt           *sql.Stmt
	deleteProjectRequestItemsStmt    *sql.Stmt
	deleteProjectRequestsStmt        *sql.Stmt
	deleteRequestItemStmt            *sql.Stmt
	deleteRequestItemsStmt           *sql.Stmt
	deleteUserProjectRoleStmt        *sql.Stmt
	deleteUserQuotaStmt              *sql.Stmt
	getDuplicateIconsStmt            *sql.Stmt
	getIconByComponentStmt           *sql.Stmt
	getIconByIDStmt                  *sql.Stmt
	getIconRequestByIDStmt           *sql.Stmt
	getIconRequestByIDAndProjectStmt *sql.Stmt
	getIconStatsStmt                 *sql.Stmt
	getIconWithRequestInfoStmt       *sql.Stmt
	getItemStatsStmt                 *sql.Stmt
	getProjectAPIKeyByHashStmt       *sql.Stmt
	getProjectAPIKeyByIDStmt         *sql.Stmt
	getProjectByIDStmt               *sql.Stmt
	getProjectByIDAndOwnerStmt       *sql.Stmt
	getProjectBySlugStmt             *sql.Stmt
	getProjectStatsStmt              *sql.Stmt
	getProjectWithStatsStmt          *sql.Stmt
	getRequestItemByComponentStmt    *sql.Stmt
	getRequestItemByIDStmt           *sql.Stmt
	getRequestStatsStmt              *sql.Stmt
	getUserProjectRoleStmt           *sql.Stmt
	getUserQuotaStmt                 *sql.Stmt
	listCollaboratorProjectIDsStmt   *sql.Stmt
	listIconsByPackageStmt           *sql.Stmt
	listIconsByStatusStmt            *sql.Stmt
	listItemsByResolutionStmt        *sql.Stmt
	listOwnedProjectIDsStmt          *sql.Stmt
	listProjectAPIKeysStmt           *sql.Stmt
	listProjectCollaboratorsStmt     *sql.Stmt
	listProjectIconsStmt             *sql.Stmt
	listProjectRequestItemsStmt      *sql.Stmt
	listProjectRequestsStmt          *sql.Stmt
	listProjectsByOwnerStmt          *sql.Stmt
	listProjectsByVisibilityStmt     *sql.Stmt
	listPublicProjectsStmt           *sql.Stmt
	listRecentActivityStmt           *sql.Stmt
	listRequestItemsStmt             *sql.Stmt
	listRequestsByStatusStmt         *sql.Stmt
	listUserProjectsStmt             *sql.Stmt
	searchIconsStmt                  *sql.Stmt
	updateAPIKeyLastUsedStmt         *sql.Stmt
	updateIconStmt                   *sql.Stmt
	updateIconStatusStmt             *sql.Stmt
	updateItemResolutionStmt         *sql.Stmt
	updateProjectStmt                *sql.Stmt
	updateProjectIconCountStmt       *sql.Stmt
	updateRequestArchivePathStmt     *sql.Stmt
	updateRequestItemStmt            *sql.Stmt
	updateRequestStatusStmt          *sql.Stmt
	updateUserProjectRoleStmt        *sql.Stmt
	updateUserQuotaStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		checkUserQuotaStmt:               q.checkUserQuotaStmt,
		countActiveAPIKeysStmt:           q.countActiveAPIKeysStmt,
		countCollaboratorProjectsStmt:    q.countCollaboratorProjectsStmt,
		countIconsByStatusStmt:           q.countIconsByStatusStmt,
		countItemsByResolutionStmt:       q.countItemsByResolutionStmt,
		countProjectCollaboratorsStmt:    q.countProjectCollaboratorsStmt,
		countProjectIconsStmt:            q.countProjectIconsStmt,
		countProjectRequestsStmt:         q.countProjectRequestsStmt,
		countProjectsByOwnerStmt:         q.countProjectsByOwnerStmt,
		countProjectsByVisibilityStmt:    q.countProjectsByVisibilityStmt,
		countRequestItemsStmt:            q.countRequestItemsStmt,
		countRequestsByStatusStmt:        q.countRequestsByStatusStmt,
		createIconStmt:                   q.createIconStmt,
		createIconRequestStmt:            q.createIconRequestStmt,
		createProjectStmt:                q.createProjectStmt,
		createProjectAPIKeyStmt:          q.createProjectAPIKeyStmt,
		createRequestItemStmt:            q.createRequestItemStmt,
		createUserProjectRoleStmt:        q.createUserProjectRoleStmt,
		createUserQuotaStmt:              q.createUserQuotaStmt,
		deactivateAPIKeyStmt:             q.deactivateAPIKeyStmt,
		deleteAPIKeyStmt:                 q.deleteAPIKeyStmt,
		deleteIconStmt:                   q.deleteIconStmt,
		deleteIconRequestStmt:            q.deleteIconRequestStmt,
		deleteProjectStmt:                q.deleteProjectStmt,
		deleteProjectAPIKeysStmt:         q.deleteProjectAPIKeysStmt,
		deleteProjectCollaboratorsStmt:   q.deleteProjectCollaboratorsStmt,
		deleteProjectIconsStmt:           q.deleteProjectIconsStmt,
		deleteProjectRequestItemsStmt:    q.deleteProjectRequestItemsStmt,
		deleteProjectRequestsStmt:        q.deleteProjectRequestsStmt,
		deleteRequestItemStmt:            q.deleteRequestItemStmt,
		deleteRequestItemsStmt:           q.deleteRequestItemsStmt,
		deleteUserProjectRoleStmt:        q.deleteUserProjectRoleStmt,
		deleteUserQuotaStmt:              q.deleteUserQuotaStmt,
		getDuplicateIconsStmt:            q.getDuplicateIconsStmt,
		getIconByComponentStmt:           q.getIconByComponentStmt,
		getIconByIDStmt:                  q.getIconByIDStmt,
		getIconRequestByIDStmt:           q.getIconRequestByIDStmt,
		getIconRequestByIDAndProjectStmt: q.getIconRequestByIDAndProjectStmt,
		getIconStatsStmt:                 q.getIconStatsStmt,
		getIconWithRequestInfoStmt:       q.getIconWithRequestInfoStmt,
		getItemStatsStmt:                 q.getItemStatsStmt,
		getProjectAPIKeyByHashStmt:       q.getProjectAPIKeyByHashStmt,
		getProjectAPIKeyByIDStmt:         q.getProjectAPIKeyByIDStmt,
		getProjectByIDStmt:               q.getProjectByIDStmt,
		getProjectByIDAndOwnerStmt:       q.getProjectByIDAndOwnerStmt,
		getProjectBySlugStmt:             q.getProjectBySlugStmt,
		getProjectStatsStmt:              q.getProjectStatsStmt,
		getProjectWithStatsStmt:          q.getProjectWithStatsStmt,
		getRequestItemByComponentStmt:    q.getRequestItemByComponentStmt,
		getRequestItemByIDStmt:           q.getRequestItemByIDStmt,
		getRequestStatsStmt:              q.getRequestStatsStmt,
		getUserProjectRoleStmt:           q.getUserProjectRoleStmt,
		getUserQuotaStmt:                 q.getUserQuotaStmt,
		listCollaboratorProjectIDsStmt:   q.listCollaboratorProjectIDsStmt,
		listIconsByPackageStmt:           q.listIconsByPackageStmt,
		listIconsByStatusStmt:            q.listIconsByStatusStmt,
		listItemsByResolutionStmt:        q.listItemsByResolutionStmt,
		listOwnedProjectIDsStmt:          q.listOwnedProjectIDsStmt,
		listProjectAPIKeysStmt:           q.listProjectAPIKeysStmt,
		listProjectCollaboratorsStmt:     q.listProjectCollaboratorsStmt,
		listProjectIconsStmt:             q.listProjectIconsStmt,
		listProjectRequestItemsStmt:      q.listProjectRequestItemsStmt,
		listProjectRequestsStmt:          q.listProjectRequestsStmt,
		listProjectsByOwnerStmt:          q.listProjectsByOwnerStmt,
		listProjectsByVisibilityStmt:     q.listProjectsByVisibilityStmt,
		listPublicProjectsStmt:           q.listPublicProjectsStmt,
		listRecentActivityStmt:           q.listRecentActivityStmt,
		listRequestItemsStmt:             q.listRequestItemsStmt,
		listRequestsByStatusStmt:         q.listRequestsByStatusStmt,
		listUserProjectsStmt:             q.listUserProjectsStmt,
		searchIconsStmt:                  q.searchIconsStmt,
		updateAPIKeyLastUsedStmt:         q.updateAPIKeyLastUsedStmt,
		updateIconStmt:                   q.updateIconStmt,
		updateIconStatusStmt:             q.updateIconStatusStmt,
		updateItemResolutionStmt:         q.updateItemResolutionStmt,
		updateProjectStmt:                q.updateProjectStmt,
		updateProjectIconCountStmt:       q.updateProjectIconCountStmt,
		updateRequestArchivePathStmt:     q.updateRequestArchivePathStmt,
		updateRequestItemStmt:            q.updateRequestItemStmt,
		updateRequestStatusStmt:          q.updateRequestStatusStmt,
		updateUserProjectRoleStmt:        q.updateUserProjectRoleStmt,
		updateUserQuotaStmt:              q.updateUserQuotaStmt,
	}
}
