// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package manager

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type IconRequestsSource string

const (
	IconRequestsSourceApi    IconRequestsSource = "api"
	IconRequestsSourceEmail  IconRequestsSource = "email"
	IconRequestsSourceManual IconRequestsSource = "manual"
)

func (e *IconRequestsSource) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IconRequestsSource(s)
	case string:
		*e = IconRequestsSource(s)
	default:
		return fmt.Errorf("unsupported scan type for IconRequestsSource: %T", src)
	}
	return nil
}

type NullIconRequestsSource struct {
	IconRequestsSource IconRequestsSource `json:"icon_requests_source"`
	Valid              bool               `json:"valid"` // Valid is true if IconRequestsSource is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIconRequestsSource) Scan(value interface{}) error {
	if value == nil {
		ns.IconRequestsSource, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IconRequestsSource.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIconRequestsSource) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IconRequestsSource), nil
}

type IconRequestsStatus string

const (
	IconRequestsStatusReceived   IconRequestsStatus = "received"
	IconRequestsStatusProcessing IconRequestsStatus = "processing"
	IconRequestsStatusDone       IconRequestsStatus = "done"
	IconRequestsStatusFailed     IconRequestsStatus = "failed"
)

func (e *IconRequestsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IconRequestsStatus(s)
	case string:
		*e = IconRequestsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for IconRequestsStatus: %T", src)
	}
	return nil
}

type NullIconRequestsStatus struct {
	IconRequestsStatus IconRequestsStatus `json:"icon_requests_status"`
	Valid              bool               `json:"valid"` // Valid is true if IconRequestsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIconRequestsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.IconRequestsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IconRequestsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIconRequestsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IconRequestsStatus), nil
}

type IconsStatus string

const (
	IconsStatusPending    IconsStatus = "pending"
	IconsStatusInProgress IconsStatus = "in_progress"
	IconsStatusPublished  IconsStatus = "published"
	IconsStatusRejected   IconsStatus = "rejected"
)

func (e *IconsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IconsStatus(s)
	case string:
		*e = IconsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for IconsStatus: %T", src)
	}
	return nil
}

type NullIconsStatus struct {
	IconsStatus IconsStatus `json:"icons_status"`
	Valid       bool        `json:"valid"` // Valid is true if IconsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIconsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.IconsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IconsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIconsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IconsStatus), nil
}

type ProjectsVisibility string

const (
	ProjectsVisibilityPrivate ProjectsVisibility = "private"
	ProjectsVisibilityPublic  ProjectsVisibility = "public"
)

func (e *ProjectsVisibility) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProjectsVisibility(s)
	case string:
		*e = ProjectsVisibility(s)
	default:
		return fmt.Errorf("unsupported scan type for ProjectsVisibility: %T", src)
	}
	return nil
}

type NullProjectsVisibility struct {
	ProjectsVisibility ProjectsVisibility `json:"projects_visibility"`
	Valid              bool               `json:"valid"` // Valid is true if ProjectsVisibility is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProjectsVisibility) Scan(value interface{}) error {
	if value == nil {
		ns.ProjectsVisibility, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProjectsVisibility.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProjectsVisibility) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProjectsVisibility), nil
}

type RequestItemsResolution string

const (
	RequestItemsResolutionPending   RequestItemsResolution = "pending"
	RequestItemsResolutionCreated   RequestItemsResolution = "created"
	RequestItemsResolutionDuplicate RequestItemsResolution = "duplicate"
	RequestItemsResolutionRejected  RequestItemsResolution = "rejected"
)

func (e *RequestItemsResolution) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RequestItemsResolution(s)
	case string:
		*e = RequestItemsResolution(s)
	default:
		return fmt.Errorf("unsupported scan type for RequestItemsResolution: %T", src)
	}
	return nil
}

type NullRequestItemsResolution struct {
	RequestItemsResolution RequestItemsResolution `json:"request_items_resolution"`
	Valid                  bool                   `json:"valid"` // Valid is true if RequestItemsResolution is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRequestItemsResolution) Scan(value interface{}) error {
	if value == nil {
		ns.RequestItemsResolution, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RequestItemsResolution.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRequestItemsResolution) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RequestItemsResolution), nil
}

type UserProjectRolesRole string

const (
	UserProjectRolesRoleOwner  UserProjectRolesRole = "owner"
	UserProjectRolesRoleAdmin  UserProjectRolesRole = "admin"
	UserProjectRolesRoleEditor UserProjectRolesRole = "editor"
	UserProjectRolesRoleViewer UserProjectRolesRole = "viewer"
)

func (e *UserProjectRolesRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserProjectRolesRole(s)
	case string:
		*e = UserProjectRolesRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserProjectRolesRole: %T", src)
	}
	return nil
}

type NullUserProjectRolesRole struct {
	UserProjectRolesRole UserProjectRolesRole `json:"user_project_roles_role"`
	Valid                bool                 `json:"valid"` // Valid is true if UserProjectRolesRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserProjectRolesRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserProjectRolesRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserProjectRolesRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserProjectRolesRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserProjectRolesRole), nil
}

// Individual icons with status tracking
type Icon struct {
	ID        uint64 `json:"id"`
	ProjectID uint64 `json:"project_id"`
	// Human-friendly icon label
	Name string `json:"name"`
	// Package name
	Pkg string `json:"pkg"`
	// Component identifier e.g. com.app/.MainActivity
	ComponentInfo string `json:"component_info"`
	// Expected drawable name inside pack
	Drawable string `json:"drawable"`
	// Icon processing status
	Status IconsStatus `json:"status"`
	// Optional metadata as JSON
	Metadata  sql.NullString `json:"metadata"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

// Icon request batches from clients
type IconRequest struct {
	ID        uint64 `json:"id"`
	ProjectID uint64 `json:"project_id"`
	// User who made the request if authenticated
	RequestedByUserID sql.NullInt64 `json:"requested_by_user_id"`
	// Request source
	Source IconRequestsSource `json:"source"`
	// Raw JSON payload from client
	AppsJson json.RawMessage `json:"apps_json"`
	// Temporary storage path/URL for zip files (TTL)
	ArchivePath sql.NullString `json:"archive_path"`
	// Request processing status
	Status IconRequestsStatus `json:"status"`
	// Status message or error details
	Message   sql.NullString `json:"message"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

// Icon pack projects table - one project per icon pack
type Project struct {
	ID          uint64 `json:"id"`
	OwnerUserID uint64 `json:"owner_user_id"`
	// Project display name
	Name string `json:"name"`
	// URL-friendly identifier, unique per user
	Slug string `json:"slug"`
	// Android package name if used as identifier
	PackageName sql.NullString `json:"package_name"`
	// Project visibility level
	Visibility ProjectsVisibility `json:"visibility"`
	// Project description
	Description sql.NullString `json:"description"`
	// Cached icon count for performance
	IconCount uint32    `json:"icon_count"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// API keys for project authentication
type ProjectApiKey struct {
	ID        uint64 `json:"id"`
	ProjectID uint64 `json:"project_id"`
	// Label for key identification and rotation
	Name string `json:"name"`
	// Hashed API token, never store plaintext
	TokenHash string `json:"token_hash"`
	// Whether the key is active
	Active bool `json:"active"`
	// Last time this key was used
	LastUsedAt sql.NullTime `json:"last_used_at"`
	CreatedAt  time.Time    `json:"created_at"`
}

// Individual request items within a batch
type RequestItem struct {
	ID        uint64 `json:"id"`
	RequestID uint64 `json:"request_id"`
	ProjectID uint64 `json:"project_id"`
	// Component name
	Name string `json:"name"`
	// Package name
	Pkg string `json:"pkg"`
	// Component identifier
	ComponentInfo string `json:"component_info"`
	// Drawable name
	Drawable string `json:"drawable"`
	// Reference to matched icon if found
	MatchedIconID sql.NullInt64 `json:"matched_icon_id"`
	// Item resolution status
	Resolution RequestItemsResolution `json:"resolution"`
	// Processing notes
	Notes     sql.NullString `json:"notes"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

// User account management table with security features and profile data
type User struct {
	ID       uint64 `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	// Password hash (bcrypt/argon2)
	PasswordHash string `json:"password_hash"`
	// 0=inactive, 1=active, 2=disabled, 3=locked, 4=deleted
	Status            bool           `json:"status"`
	CreatedAt         time.Time      `json:"created_at"`
	UpdatedAt         time.Time      `json:"updated_at"`
	LastLoginAt       sql.NullTime   `json:"last_login_at"`
	FailedAttempts    uint8          `json:"failed_attempts"`
	LockedUntil       sql.NullTime   `json:"locked_until"`
	EmailVerifiedAt   sql.NullTime   `json:"email_verified_at"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	DisplayName       sql.NullString `json:"display_name"`
	AvatarUrl         sql.NullString `json:"avatar_url"`
	// E.164 format (+country code)
	Phone      sql.NullString `json:"phone"`
	Locale     string         `json:"locale"`
	Timezone   string         `json:"timezone"`
	MfaEnabled bool           `json:"mfa_enabled"`
	// AES encrypted storage
	MfaSecret sql.NullString `json:"mfa_secret"`
	// Encrypted JSON array
	RecoveryCodes    sql.NullString `json:"recovery_codes"`
	PrivacyVersion   uint16         `json:"privacy_version"`
	MarketingConsent bool           `json:"marketing_consent"`
}

// User roles and permissions for project collaboration
type UserProjectRole struct {
	UserID    uint64 `json:"user_id"`
	ProjectID uint64 `json:"project_id"`
	// User role in the project
	Role    UserProjectRolesRole `json:"role"`
	AddedAt time.Time            `json:"added_at"`
}

// User project creation quotas
type UserQuota struct {
	UserID uint64 `json:"user_id"`
	// Maximum number of projects user can create (0 = unlimited)
	MaxProjects uint32    `json:"max_projects"`
	CreatedAt   time.Time `json:"created_at"`
}
