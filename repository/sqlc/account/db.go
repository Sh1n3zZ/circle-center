// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package account

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countUsersStmt, err = db.PrepareContext(ctx, countUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsers: %w", err)
	}
	if q.countUsersByStatusStmt, err = db.PrepareContext(ctx, countUsersByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsersByStatus: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getLockedUsersStmt, err = db.PrepareContext(ctx, getLockedUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetLockedUsers: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByPhoneStmt, err = db.PrepareContext(ctx, getUserByPhone); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByPhone: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUsersByEmailVerifiedStmt, err = db.PrepareContext(ctx, getUsersByEmailVerified); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersByEmailVerified: %w", err)
	}
	if q.getUsersByLastLoginStmt, err = db.PrepareContext(ctx, getUsersByLastLogin); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersByLastLogin: %w", err)
	}
	if q.getUsersWithMFAStmt, err = db.PrepareContext(ctx, getUsersWithMFA); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersWithMFA: %w", err)
	}
	if q.incrementFailedAttemptsStmt, err = db.PrepareContext(ctx, incrementFailedAttempts); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementFailedAttempts: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.listUsersByStatusStmt, err = db.PrepareContext(ctx, listUsersByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsersByStatus: %w", err)
	}
	if q.lockUserStmt, err = db.PrepareContext(ctx, lockUser); err != nil {
		return nil, fmt.Errorf("error preparing query LockUser: %w", err)
	}
	if q.unlockUserStmt, err = db.PrepareContext(ctx, unlockUser); err != nil {
		return nil, fmt.Errorf("error preparing query UnlockUser: %w", err)
	}
	if q.updateLastLoginStmt, err = db.PrepareContext(ctx, updateLastLogin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateLastLogin: %w", err)
	}
	if q.updateMFASettingsStmt, err = db.PrepareContext(ctx, updateMFASettings); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMFASettings: %w", err)
	}
	if q.updateMarketingConsentStmt, err = db.PrepareContext(ctx, updateMarketingConsent); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMarketingConsent: %w", err)
	}
	if q.updatePrivacyVersionStmt, err = db.PrepareContext(ctx, updatePrivacyVersion); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePrivacyVersion: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserProfileStmt, err = db.PrepareContext(ctx, updateUserProfile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserProfile: %w", err)
	}
	if q.updateUserStatusStmt, err = db.PrepareContext(ctx, updateUserStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserStatus: %w", err)
	}
	if q.verifyEmailStmt, err = db.PrepareContext(ctx, verifyEmail); err != nil {
		return nil, fmt.Errorf("error preparing query VerifyEmail: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countUsersStmt != nil {
		if cerr := q.countUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersStmt: %w", cerr)
		}
	}
	if q.countUsersByStatusStmt != nil {
		if cerr := q.countUsersByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersByStatusStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getLockedUsersStmt != nil {
		if cerr := q.getLockedUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLockedUsersStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByPhoneStmt != nil {
		if cerr := q.getUserByPhoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByPhoneStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUsersByEmailVerifiedStmt != nil {
		if cerr := q.getUsersByEmailVerifiedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersByEmailVerifiedStmt: %w", cerr)
		}
	}
	if q.getUsersByLastLoginStmt != nil {
		if cerr := q.getUsersByLastLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersByLastLoginStmt: %w", cerr)
		}
	}
	if q.getUsersWithMFAStmt != nil {
		if cerr := q.getUsersWithMFAStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersWithMFAStmt: %w", cerr)
		}
	}
	if q.incrementFailedAttemptsStmt != nil {
		if cerr := q.incrementFailedAttemptsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementFailedAttemptsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.listUsersByStatusStmt != nil {
		if cerr := q.listUsersByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersByStatusStmt: %w", cerr)
		}
	}
	if q.lockUserStmt != nil {
		if cerr := q.lockUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing lockUserStmt: %w", cerr)
		}
	}
	if q.unlockUserStmt != nil {
		if cerr := q.unlockUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unlockUserStmt: %w", cerr)
		}
	}
	if q.updateLastLoginStmt != nil {
		if cerr := q.updateLastLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateLastLoginStmt: %w", cerr)
		}
	}
	if q.updateMFASettingsStmt != nil {
		if cerr := q.updateMFASettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMFASettingsStmt: %w", cerr)
		}
	}
	if q.updateMarketingConsentStmt != nil {
		if cerr := q.updateMarketingConsentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMarketingConsentStmt: %w", cerr)
		}
	}
	if q.updatePrivacyVersionStmt != nil {
		if cerr := q.updatePrivacyVersionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePrivacyVersionStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserProfileStmt != nil {
		if cerr := q.updateUserProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserProfileStmt: %w", cerr)
		}
	}
	if q.updateUserStatusStmt != nil {
		if cerr := q.updateUserStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStatusStmt: %w", cerr)
		}
	}
	if q.verifyEmailStmt != nil {
		if cerr := q.verifyEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing verifyEmailStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	countUsersStmt              *sql.Stmt
	countUsersByStatusStmt      *sql.Stmt
	createUserStmt              *sql.Stmt
	deleteUserStmt              *sql.Stmt
	getLockedUsersStmt          *sql.Stmt
	getUserByEmailStmt          *sql.Stmt
	getUserByIDStmt             *sql.Stmt
	getUserByPhoneStmt          *sql.Stmt
	getUserByUsernameStmt       *sql.Stmt
	getUsersByEmailVerifiedStmt *sql.Stmt
	getUsersByLastLoginStmt     *sql.Stmt
	getUsersWithMFAStmt         *sql.Stmt
	incrementFailedAttemptsStmt *sql.Stmt
	listUsersStmt               *sql.Stmt
	listUsersByStatusStmt       *sql.Stmt
	lockUserStmt                *sql.Stmt
	unlockUserStmt              *sql.Stmt
	updateLastLoginStmt         *sql.Stmt
	updateMFASettingsStmt       *sql.Stmt
	updateMarketingConsentStmt  *sql.Stmt
	updatePrivacyVersionStmt    *sql.Stmt
	updateUserPasswordStmt      *sql.Stmt
	updateUserProfileStmt       *sql.Stmt
	updateUserStatusStmt        *sql.Stmt
	verifyEmailStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		countUsersStmt:              q.countUsersStmt,
		countUsersByStatusStmt:      q.countUsersByStatusStmt,
		createUserStmt:              q.createUserStmt,
		deleteUserStmt:              q.deleteUserStmt,
		getLockedUsersStmt:          q.getLockedUsersStmt,
		getUserByEmailStmt:          q.getUserByEmailStmt,
		getUserByIDStmt:             q.getUserByIDStmt,
		getUserByPhoneStmt:          q.getUserByPhoneStmt,
		getUserByUsernameStmt:       q.getUserByUsernameStmt,
		getUsersByEmailVerifiedStmt: q.getUsersByEmailVerifiedStmt,
		getUsersByLastLoginStmt:     q.getUsersByLastLoginStmt,
		getUsersWithMFAStmt:         q.getUsersWithMFAStmt,
		incrementFailedAttemptsStmt: q.incrementFailedAttemptsStmt,
		listUsersStmt:               q.listUsersStmt,
		listUsersByStatusStmt:       q.listUsersByStatusStmt,
		lockUserStmt:                q.lockUserStmt,
		unlockUserStmt:              q.unlockUserStmt,
		updateLastLoginStmt:         q.updateLastLoginStmt,
		updateMFASettingsStmt:       q.updateMFASettingsStmt,
		updateMarketingConsentStmt:  q.updateMarketingConsentStmt,
		updatePrivacyVersionStmt:    q.updatePrivacyVersionStmt,
		updateUserPasswordStmt:      q.updateUserPasswordStmt,
		updateUserProfileStmt:       q.updateUserProfileStmt,
		updateUserStatusStmt:        q.updateUserStatusStmt,
		verifyEmailStmt:             q.verifyEmailStmt,
	}
}
